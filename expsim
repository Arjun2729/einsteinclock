import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# -------------------------
# 1. Physical Parameters
# -------------------------
L = 1.0         # Distance between the two mirrors
v = 0.6         # Speed of the moving clock (fraction of c)
c = 1.0         # Speed of light (set to 1 for simplicity)
gamma = 1 / np.sqrt(1 - v**2)

T0 = 2 * L            # Period of the stationary clock
T_moving = 2 * gamma * L

T_up_stationary = L
T_down_stationary = L
T_up_moving = gamma * L
T_down_moving = gamma * L

x0_moving = 5.0

# -------------------------
# 2. Animation Parameters
# -------------------------
t_max = 10.0  # total simulation time (s)
dt = 0.02     # time step (s)
n_frames = int(t_max / dt)

# -------------------------
# 3. Set Up the Figure
# -------------------------
fig, ax = plt.subplots(figsize=(8, 4))
ax.set_xlim(-1, 14)
ax.set_ylim(-0.5, 1.5)
ax.set_aspect('equal')
ax.set_xlabel("x")
ax.set_ylabel("y")
ax.set_title("Relativistic Light Clock Demonstration")

# -------------------------
# 4. Plot the Stationary Clock
# -------------------------
stationary_clock_x = 2
ax.plot([stationary_clock_x, stationary_clock_x], [0, L],
        color='blue', lw=2, label="Stationary Clock")
# Blue photon path and marker
stationary_path, = ax.plot([], [], color='blue', lw=1)
stationary_marker, = ax.plot([], [], 'o', color='blue', markersize=6)

# -------------------------
# 5. Plot the Moving Clock
# -------------------------
moving_clock_line, = ax.plot([], [], color='red', lw=2, label="Moving Clock")
moving_path, = ax.plot([], [], color='red', lw=1)
moving_marker, = ax.plot([], [], 'o', color='red', markersize=6)

# Time display text
time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes)

# Lists for storing photon paths (for trails)
xdata_s, ydata_s = [], []
xdata_m, ydata_m = [], []

# -------------------------
# 6. Helper Functions
# -------------------------
def stationary_photon_position(t):
    phase = t % T0
    if phase < T_up_stationary:
        y = phase  # Photon going up
    else:
        y = 2 * L - phase  # Photon coming down
    return stationary_clock_x, y

def moving_photon_position(t):
    # Determine which cycle we're in for the moving clock
    cycle_index = int(t // T_moving)
    cycle_start_time = cycle_index * T_moving
    phase = t - cycle_start_time

    # Horizontal position: mirrors move at constant speed v
    x = x0_moving + v * t
    if phase < T_up_moving:
        # Photon going up in the clock's rest frame (vertical component scaled by 1/gamma)
        y = (1 / gamma) * phase
    else:
        time_in_down = phase - T_up_moving
        y = L - (1 / gamma) * time_in_down
    return x, y

def moving_mirror_positions(t):
    x_m = x0_moving + v * t
    return [x_m, x_m], [0, L]

# -------------------------
# 7. Initialization Function
# -------------------------
def init():
    xdata_s.clear()
    ydata_s.clear()
    xdata_m.clear()
    ydata_m.clear()
    
    stationary_path.set_data([], [])
    stationary_marker.set_data([], [])
    moving_path.set_data([], [])
    moving_marker.set_data([], [])
    moving_clock_line.set_data([], [])
    time_text.set_text('')
    return (stationary_path, stationary_marker,
            moving_path, moving_marker,
            moving_clock_line, time_text)

# -------------------------
# 8. Update Function for Animation
# -------------------------
def update(frame):
    t = frame * dt
    
    # Update stationary photon position
    x_s, y_s = stationary_photon_position(t)
    xdata_s.append(x_s)
    ydata_s.append(y_s)
    stationary_path.set_data(xdata_s, ydata_s)
    stationary_marker.set_data([x_s], [y_s])
    
    # Update moving photon position
    x_m, y_m = moving_photon_position(t)
    xdata_m.append(x_m)
    ydata_m.append(y_m)
    moving_path.set_data(xdata_m, ydata_m)
    moving_marker.set_data([x_m], [y_m])
    
    # Update moving mirror position
    mirror_x, mirror_y = moving_mirror_positions(t)
    moving_clock_line.set_data(mirror_x, mirror_y)
    
    # Update time text
    time_text.set_text(f"Time = {t:.2f} s")
    
    return (stationary_path, stationary_marker,
            moving_path, moving_marker,
            moving_clock_line, time_text)

# -------------------------
# 9. Create the Animation
# -------------------------
ani = FuncAnimation(fig, update, frames=n_frames, init_func=init,
                    interval=dt*1000, blit=False, repeat=False)

plt.legend(loc="upper right")

# -------------------------
# 10. Generate and Save HTML Page
# -------------------------
# Convert the animation to a JavaScript HTML representation.
html_str = ani.to_jshtml()

# Wrap the animation in a complete HTML page.
html_page = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Relativistic Light Clock Animation</title>
</head>
<body>
    {html_str}
</body>
</html>
"""

# Write the HTML page to a file.
with open("index.html", "w") as f:
    f.write(html_page)

print("Animation saved as 'light_clock.html'. Open this file in a web browser to view the simulation.")
